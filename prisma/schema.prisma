// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  username    String    @unique
  password    String
  email       String
  phoneNumber String
  avatar      String
  role        Role
  customer    Customer?
}

enum Role {
  Customer
  Admin
}

model Customer {
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  birthday      DateTime?
  sex           Sex?
  address       String?
  creditCards   CreditCard[]
  orders        Order[]
  shoppingCarts ShoppingCart[]
  coupons       Coupon[]
}

enum Sex {
  Male
  Female
}

model CreditCard {
  id              Int      @id @default(autoincrement())
  customer        Customer @relation(fields: [customerUserId], references: [userId])
  customerUserId  Int
  cardNo          String
  securityCode    String
  expirationYear  String
  expirationMonth String
  Order           Order[]
}

model Product {
  id           Int            @id @default(autoincrement())
  publishedAt  DateTime       @default(now())
  modifiedAt   DateTime       @default(now())
  name         String
  category     String
  price        Float
  stock        Int
  description  String
  images       String[]
  OrderItem    OrderItem[]
  ShoppingCart ShoppingCart[]
}

model Order {
  id             Int         @id @default(autoincrement())
  customer       Customer    @relation(fields: [customerUserId], references: [userId])
  customerUserId Int
  orderedAt      DateTime    @default(now())
  shippedAt      DateTime?
  items          OrderItem[]
  creditCard     CreditCard  @relation(fields: [creditCardId], references: [id])
  creditCardId   Int
  couponUsed     Coupon?     @relation(fields: [couponId], references: [id])
  couponId       Int?
}

model OrderItem {
  order         Order?  @relation(fields: [orderId], references: [id])
  orderId       Int
  product       Product @relation(fields: [productId], references: [id])
  productId     Int
  purchasePrice Float
  quantity      Int

  @@unique([orderId, productId])
}

model ShoppingCart {
  customer       Customer @relation(fields: [customerUserId], references: [userId])
  customerUserId Int
  product        Product  @relation(fields: [productId], references: [id])
  productId      Int
  quantity       Int

  @@unique([customerUserId, productId])
}

model Coupon {
  id             Int      @id @default(autoincrement())
  customer       Customer @relation(fields: [customerUserId], references: [userId])
  customerUserId Int
  discountRate   Float
  order          Order[]
}
